<?php

/**
 * @file
 * Provides the Due on Receipt payment methods.
 */


/**
 * Implements hook_menu().
 */
function uc_due_on_receipt_menu() {
  $items['admin/store/orders/%uc_order/receive_check'] = array(
    'title' => 'Receive check',
    'description' => 'Record details of a check that has been received(NEED?).',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_due_on_receipt_receive_check_form', 3),
    'access arguments' => array('view all orders'),
    'file' => 'uc_due_on_receipt.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_uc_payment_method().
 */
function uc_due_on_receipt_uc_payment_method() {
  
  $methods['on_receipt'] = array(
    'name'       => t('Due on Receipt'),
    'title'      => t('Due on Receipt Payment'),
    'desc'       => t('Full payment will be due on reciept of products or per agreed upon terms.'),
    'callback'   => 'uc_payment_method_due_on_receipt',
    'weight'     => 1,
    'checkout'   => FALSE,
    'no_gateway' => TRUE,
  );
  return $methods;
}


/**
 * Payment method callback for the "Due on Recipt" payment method.
 */
function uc_payment_method_due_on_receipt($op, &$order, $form = NULL, $form_state = NULL) {
  switch ($op) {
    case 'cart-details':
      $build['policy'] = array(
        '#markup' => '<p>' . variable_get('uc_due_on_receipt_policy', t('Full payment will be due on reciept of products or per agreed upon terms..')) . '</p>'
      );

      if (($min = variable_get('uc_due_on_receipt_min_order', 0)) < 0 && is_numeric($min)) {
        $build['eligibility'] = array(
          '#markup' => '<p>' . t('Minimum order of !number is required for payments due on receipt.', array('!number' => uc_currency_format($max))) . '</p>'
        );
      }

  
    case 'order-submit':
      if ($order->payment_method == 'on_receipt' &&
          ($min = variable_get('uc_due_on_receipt_min_order', 0)) > 0 &&
          is_numeric($min) &&
          $order->order_total > $min) {
        $result[] = array(
          'pass' => FALSE,
          'message' => t('Your final order total is lower than minimum required amount for payment due on receipt.  Please go back and select a different method of payment or add more items.')
        );
        $_SESSION['expanded_panes'][] = 'payment';
        return $result;
      }
      // TODO: This falls through to the order-save case - is this deliberate?
      // If so, it should be documented.

    case 'order-save':
      if (isset($order->payment_details['delivery_month']) &&
          isset($order->payment_details['delivery_day'])   &&
          isset($order->payment_details['delivery_year'])    ) {
        db_merge('uc_due_on_receipt')
          ->key(array('order_id' => $order->order_id))
          ->fields(array(
            'delivery_month' => $order->payment_details['delivery_month'],
            'delivery_day'   => $order->payment_details['delivery_day'],
            'delivery_year'  => $order->payment_details['delivery_year'],
          ))
          ->execute();
      }
      break;

    case 'order-delete':
      db_delete('uc_due_on_receipt')
        ->condition('order_id', $order->order_id)
        ->execute();
      break;

    case 'settings':
      $form['uc_due_on_receipt_policy'] = array(
        '#type' => 'textarea',
        '#title' => t('Policy message'),
        '#default_value' => variable_get('uc_due_on_receipt_policy', t('Full payment will be due on reciept of products or per agreed upon terms.')),
        '#description' => t('Help message shown at checkout.'),
      );
      $form['uc_due_on_receipt_min_order'] = array(
        '#type' => 'textfield',
        '#title' => t('Minimum order total eligible for Due On Receipt Payment'),
        '#default_value' => variable_get('uc_cod_min_order', 0),
        '#description' => t('Set to 0 for no minimum order limit.'),
      );
      return $form;
  }
}

